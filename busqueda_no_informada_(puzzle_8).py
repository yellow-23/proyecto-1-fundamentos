# -*- coding: utf-8 -*-
"""BUSQUEDA NO INFORMADA (puzzle-8).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1spqho9EHw6tgXAOwMOuUsGjV7l0ma1fi
"""

from numpy import array, zeros, copy, array_equal
from  heapq import heappush, heappop

class nodo:
    def __init__(self, puzzle, pos0, padre, costo):
        self.puzzle = zeros((3,3), dtype=int)
        self.puzzle = copy(puzzle)
        self.pos0 = pos0
        self.padre = padre
        self.costo = costo

    def __lt__(self, otroNodo):
        return self.costo < otroNodo.costo

    def __str__(self):
        return '\n'.join(' '.join(str(x) for x in fila) for fila in self.puzzle) #formatea la matriz para que salga sin corchetes ni comas.

    def __eq__(self,otroNodo):
        return array_equal(self.puzzle, otroNodo.puzzle)

    def aplicaRegla(self, regla):
        puzzle = copy(self.puzzle)
        sucesor = nodo(puzzle, (0,0), self, self.costo + 1)

        fila0 = self.pos0[0]
        col0 = self.pos0[1]

        if regla == 1 and fila0 > 0:  # intercambia el espacio con celda de arriba

            sucesor.puzzle[fila0, col0] = sucesor.puzzle[fila0-1, col0]
            sucesor.puzzle[fila0-1, col0] = 0
            sucesor.pos0 = (fila0-1, col0)

        elif regla == 2 and col0 < 2: # intercambia el espacio con celda de la derecha

            sucesor.puzzle[fila0, col0] = sucesor.puzzle[fila0, col0+1]
            sucesor.puzzle[fila0, col0+1] = 0
            sucesor.pos0 = (fila0, col0+1)

        elif regla == 3 and fila0 < 2:   # intercambia el espacio con celda de abajo

            sucesor.puzzle[fila0, col0] = sucesor.puzzle[fila0+1, col0]
            sucesor.puzzle[fila0+1, col0] = 0
            sucesor.pos0 = (fila0+1, col0)

        elif regla == 4 and col0 > 0:    # intercambia el espacio con celda de la izquierda

            sucesor.puzzle[fila0, col0] = sucesor.puzzle[fila0, col0-1]
            sucesor.puzzle[fila0, col0-1] = 0
            sucesor.pos0 = (fila0, col0-1)

        return sucesor

    def sucesores(self, ABIERTOS, CERRADOS):
        listaSucesores = []
        for i in range(1,5):
            sucesor = self.aplicaRegla(i)
            if sucesor is not None and sucesor not in ABIERTOS and sucesor not in CERRADOS:
                listaSucesores.append(sucesor)
        return listaSucesores

    def esMeta(self):
        meta = array([[1, 2, 3], [4, 5, 6], [7, 8, 0]])
        return array_equal(self.puzzle, meta)

# ------------fin clase nodo ------------------------

def ingresaLista(lista, nodo, esquema):
    if esquema == "BFS":
        lista.append(nodo)    #BFS: Ingreso al final
    if esquema == "DFS":
        lista.insert(0, nodo)    #DFS: Ingreso al inicio
    if esquema == "UCS":
        heappush(lista, nodo)
    return lista

def Solucion(nodo, inicial):
    solucion = []
    while nodo is not inicial:
        solucion = [str(nodo)] + solucion
        nodo = nodo.padre
    return [str(inicial)] + solucion

def busquedaNoInformada(nodoInicial, esquema):
    ABIERTOS = [nodoInicial]
    CERRADOS = []
    exito = False
    fracaso = False
    cont = 0
    while not exito and not fracaso:
        cont += 1
        #print(f"cont: {cont}")
        if esquema == "UCS":
            nodoActual = heappop(ABIERTOS)
        else:
            nodoActual = ABIERTOS.pop(0)
        #print("\nNodo actual: ")
        #print(nodoActual)

        CERRADOS.append(nodoActual)
        if nodoActual.esMeta():
            exito = True
        else:
            listaSucesores = nodoActual.sucesores(ABIERTOS, CERRADOS)
            for nodo in listaSucesores:
                ABIERTOS = ingresaLista(ABIERTOS, nodo, esquema)
            if ABIERTOS == []:
                fracaso = True
    if exito:
        return Solucion(nodoActual, inicial), len(CERRADOS)
    else:
        return None

#---- BLOQUE PRINCIPAL:
# Cambiar el esquema por "BFS", "DFS", "UCS"
inicial = nodo(array([[4, 7, 3],[2, 0, 5],[8, 1, 6]]), (1,1), None, 0) #1:16 para BFS, aprox 10:00 para UCS

esquema = "BFS"
respuesta, nodosRevisados = busquedaNoInformada(inicial, esquema)
if respuesta is None:
    print("No se encontró solución")
else:
    print(f"Cantidad de nodos revisados: {nodosRevisados} nodos")
    print(f"\nSolución encontrada por {esquema}: ")
    for nodo in respuesta:
        print(f"\n{nodo}")

